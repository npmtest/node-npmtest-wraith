{"/home/travis/build/npmtest/node-npmtest-wraith/test.js":"/* istanbul instrument in package npmtest_wraith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wraith/lib.npmtest_wraith.js":"/* istanbul instrument in package npmtest_wraith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wraith = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wraith = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wraith/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wraith && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wraith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wraith\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wraith.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_wraith.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wraith.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_wraith.__dirname +\n                    '/lib.npmtest_wraith.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wraith/node_modules/wraith/lib/wraith.js":"'use strict';\n\nvar fs       = require('fs');\nvar async    = require('async');\nvar mkdirp   = require('mkdirp');\nvar path     = require('path');\nvar resemble = require('node-resemble-js');\nvar progress = require('progress');\nvar gallery  = require('./gallery');\nvar helpers  = require('./helpers');\nvar log      = require('./logger');\n\nfunction Wraith(config, cb) {\n\tvar self  = this;\n\tself.cb   = cb;\n\tlog.quiet = config.quiet;\n\n\tif(config.paths && config.paths.length > 0) {\n\t\tself.config(config);\n\t} else if(config.spider && config.spider !== '') {\n\t\tif(!fs.existsSync(config.spider)) {\n\t\t\tvar spider = require('./spider');\n\n\t\t\tspider.spider(config.domains[0], config.spider, function() {\n\t\t\t\tself.config(config);\n\t\t\t});\n\t\t} else {\n\t\t\tself.config(config);\n\t\t}\n\t} else {\n\t\tlog.error('You must specify either a list of pages or a location to store the spider file');\n\t\tprocess.exit(1);\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nmodule.exports = Wraith;\n\nWraith.prototype.config = function(config) {\n\n\tvar self = this;\n\n\tself.domains        = [];\n\tself.domainLabels   = [];\n\tself.outputFolder   = config.outputDir || 'shots/';\n\tself.engines        = config.engines || ['phantomjs'];\n\tself.maxConnections = config.maxConnections || 20;\n\tself.project        = config.project || '';\n\tself.sizes          = [];\n\tself.dirs           = [];\n\tself.quiet          = config.quiet || false;\n\n\tif(typeof config.paths !== 'undefined' && config.paths.length > 0 ) {\n\t\tself.urls = config.paths;\n\t} else {\n\t\tself.urls = fs.readFileSync(config.spider, 'utf8').split('\\n');\n\t}\n\n\tfor(var domain in config.domains) {\n\t\tself.domains.push(config.domains[domain].replace(/\\/+$/, ''));\n\t\tself.domainLabels.push(config.domains[domain].replace(/.*?:\\/\\//g, ''));\n\t}\n\n\tif(self.urls.length === 0 || self.domains.length === 0) {\n\t\tlog.error('No url(s) provided');\n\t\tprocess.exit(1);\n\t\treturn false;\n\t}\n\n\tfor(var url in self.urls) {\n\t\tvar folder = path.join(self.outputFolder, self.urls[url].substring(1).replace(/\\/+$/,'') + '/');\n\t\tself.dirs.push(folder);\n\t}\n\n\tif( config.sizes && config.sizes.length > 0 ) {\n\t\tself.sizes = config.sizes;\n\t\tself.clean();\n\t\treturn self;\n\t} else {\n\t\tlog.info('No sizes defined, using most popular from w3counter stats');\n\t\tvar w3counter = require('w3counter');\n\t\tw3counter('res', function (err, data) {\n\t\t\tif (err) { throw err; }\n\t\t\tfor(var val in data) {\n\t\t\t\tvar size = data[val].item.slice(0, data[val].item.indexOf('x'));\n\t\t\t\tself.sizes.push(size);\n\t\t\t}\n\t\t\tself.clean();\n\t\t\treturn self;\n\t\t});\n\t}\n};\n\nWraith.prototype.clean = function() {\n\tvar self = this;\n\tlog.info('Cleaned up old folders and files');\n\n\thelpers.emptyFolder(self.outputFolder, function () {\n\t\tself.createFolders();\n\t\treturn self;\n\t});\n};\n\nWraith.prototype.createFolders = function() {\n\tvar self = this;\n\n\tasync.each(self.dirs, function(folder, callback) {\n\t\tmkdirp(folder, function (err) {\n\t\t\tif (err) { throw err; }\n\t\t\tcallback();\n\t\t});\n\t}, function(err) {\n\t\tif( err ) {\n\t\t\tlog.error('An error occurred during folder creation');\n\t\t\tprocess.exit(1);\n\t\t\treturn self;\n\t\t} else {\n\t\t\tlog.success('New folders created successfully');\n\t\t\tself.takeScreenshots();\n\t\t\treturn self;\n\t\t}\n\t});\n};\n\nWraith.prototype.takeScreenshots = function () {\n\tvar self            = this;\n\tvar url             = null;\n\tvar imageUrls       = [];\n\tvar screenshotQueue = [];\n\tvar size            = null;\n\tvar image           = null;\n\tvar folder          = null;\n\n\tif( self.engines.length === 1 ) {\n\t\tfor(var domain in self.domains) {\n\t\t\tfor(url in self.urls) {\n\t\t\t\timageUrls.push(self.domains[domain] + self.urls[url]);\n\t\t\t\tself.folder = path.join(self.outputFolder, self.urls[url].substring(1).replace(/\\/+$/,'') + '/');\n\t\t\t\tfor(size in self.sizes) {\n\t\t\t\t\timage = self.folder + self.domainLabels[domain] + '_' + self.sizes[size] + '.png';\n\t\t\t\t\tscreenshotQueue.push({\n\t\t\t\t\t\tengine: self.engines[0],\n\t\t\t\t\t\turl: self.domains[domain] + self.urls[url],\n\t\t\t\t\t\tsize: self.sizes[size],\n\t\t\t\t\t\toutput: image\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor(url in self.urls) {\n\t\t\tfor(var engine in self.engines) {\n\t\t\t\timageUrls.push(self.domains[0] + self.urls[url]);\n\t\t\t\tfolder = path.join(self.outputFolder, self.urls[url].substring(1).replace(/\\/+$/,'') + '/');\n\t\t\t\tfor(size in self.sizes) {\n\t\t\t\t\timage = folder + self.engines[engine] + '_' + self.sizes[size] + '.png';\n\t\t\t\t\tscreenshotQueue.push({\n\t\t\t\t\t\tengine: self.engines[engine],\n\t\t\t\t\t\turl: self.domains[0] + self.urls[url],\n\t\t\t\t\t\tsize: self.sizes[size],\n\t\t\t\t\t\toutput: image\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlog.info('Taking screenshots');\n\n\tvar bar = false;\n\tif(!this.quiet) {\n\t\tbar = new progress(':bar :elapseds :current/:total', {total: screenshotQueue.length});\n\t}\n\n\tvar webshot = require('webshot');\n\tasync.eachLimit(screenshotQueue, self.maxConnections, function(task, callback) {\n\t\twebshot(task.url, task.output, {\n\t\t\twindowSize: {\n\t\t\t\twidth:  task.size,\n\t\t\t\theight: 300\n\t\t\t},\n\t\t\tshotSize: {\n\t\t\t\twidth:  task.size,\n\t\t\t\theight: 'all'\n\t\t\t},\n\t\t\tdefaultWhiteBackground: true,\n\t\t\tphantomPath: task.engine,\n\t\t\tphantomConfig: {\n\t\t\t\t'debug':       'false',\n\t\t\t\t'load-images': 'true'\n\t\t\t}\n\t\t}, function(err) {\n\t\t\tif( err ) {\n\t\t\t\tlog.error('An error occurred');\n\t\t\t\tlog.error(err);\n\t\t\t\treturn self;\n\t\t\t} else {\n\t\t\t\tif(bar) {\n\t\t\t\t\tbar.tick();\n\t\t\t\t}\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\n\t}, function(err) {\n\t\tif( err ) {\n\t\t\tlog.error('An error occurred during screenshotting');\n\t\t\tprocess.exit(1);\n\t\t\treturn self;\n\t\t} else {\n\t\t\tlog.success('Screenshots done');\n\t\t\tself.compareScreenshots();\n\t\t\treturn self;\n\t\t}\n\t});\n};\n\nWraith.prototype.compareScreenshots = function() {\n\tvar self        = this;\n\tvar fileLabels  = [];\n\n\tif( self.engines.length === 1 ) {\n\t\tfileLabels = [self.domainLabels[0], self.domainLabels[1]];\n\t} else {\n\t\tfileLabels = [self.engines[0], self.engines[1]];\n\t}\n\n\tself.compareQueue = [];\n\n\tfor(var url in self.urls) {\n\t\tvar dir = self.urls[url].substring(1).replace(/\\/+$/,'') + '/';\n\t\tvar folder = path.join(self.outputFolder, dir);\n\t\tfor(var size in self.sizes) {\n\t\t\tvar item = {\n\t\t\t\t'dir': ( size > 0 ? false : folder),\n\t\t\t\t'sort': folder + size,\n\t\t\t\t'base': folder + fileLabels[0]  + '_' + self.sizes[size] + '.png',\n\t\t\t\t'compare': folder + fileLabels[1] + '_' + self.sizes[size] + '.png',\n\t\t\t\t'output': folder + self.sizes[size] + '_diff.png',\n\t\t\t\t'diff': folder +  self.sizes[size] + '_diff.txt',\n\t\t\t\t'size': self.sizes[size]\n\t\t\t};\n\t\t\tself.compareQueue.push(item);\n\t\t}\n\t}\n\n\tresemble.outputSettings({\n\t\terrorColor: {\n\t\t\tred: 200,\n\t\t\tgreen: 0,\n\t\t\tblue: 0\n\t\t},\n\t\terrorType: 'movementWithDistanceBasedIntensity',\n\t\ttransparency: 0.4,\n\t\tlargeImageThreshold: 0\n\t});\n\n\tvar bar = false;\n\tif(!this.quiet) {\n\t\tbar = new progress(':bar :elapseds :current/:total', { total: self.compareQueue.length });\n\t}\n\n\tlog.info('Comparing images');\n\tasync.eachLimit(self.compareQueue, self.maxConnections, function(task, callback) {\n\t\tresemble('./' + task.base).compareTo('./' + task.compare).ignoreAntialiasing().onComplete(function(data) {\n\t\t\tdata.getDiffImage().pack().pipe(fs.createWriteStream(task.output));\n\t\t\tfs.writeFile('./' + task.diff, data.misMatchPercentage, function(err) {\n\t\t\t\tif(err) { log.error(err); }\n\t\t\t\tif(bar) {\n\t\t\t\t\tbar.tick();\n\t\t\t\t}\n\t\t\t\tcallback();\n\t\t\t});\n\t\t});\n\t}, function(err) {\n\t\tif( err ) {\n\t\t\tlog.log(err);\n\t\t\tlog.error('An error occurred during comparison');\n\t\t\tprocess.exit(1);\n\t\t\treturn self;\n\t\t} else {\n\t\t\tlog.success('Image comparison done');\n\t\t\tself.generateGallery();\n\t\t\treturn self;\n\t\t}\n\t});\n};\n\nWraith.prototype.generateGallery = function() {\n\tvar self = this;\n\tgallery.generate(self.dirs, self.compareQueue, self.outputFolder, self.config.project, self.cb);\n};\n","/home/travis/build/npmtest/node-npmtest-wraith/node_modules/wraith/lib/gallery.js":"'use strict';\n\nvar fs       = require('fs');\nvar path     = require('path');\nvar mustache = require('mustache');\nvar helpers  = require('./helpers');\nvar log      = require('./logger');\n\nmodule.exports.generate = function(dirs, compareList, outputDir, project, cb) {\n\tcompareList = compareList.sort(helpers.sortByProp('sort'));\n\tvar template = path.join(__dirname, '/../gallery.html');\n\tvar view = {\n\t\t'images' : compareList,\n\t\t'dirs': dirs.sort(),\n\t\t'project': project,\n\t\t'resolve': function() {\n\t\t\treturn function(text, render) {\n\t\t\t\tvar rendered = render(text);\n\t\t\t\treturn rendered.replace(/&#x2F;/g, '/').replace(outputDir, '').replace(/^\\//, '');\n\t\t\t};\n\t\t},\n\t\t'contents': function() {\n\t\t\treturn function(text, render) {\n\t\t\t\tvar rendered = render(text);\n\t\t\t\tvar output = fs.readFileSync(rendered.replace(/&#x2F;/g, '/').replace(/\\/\\//g,'/'),'utf8');\n\t\t\t\treturn output ? output : 0;\n\t\t\t};\n\t\t}\n\t};\n\n\tfs.readFile(template, function (err, data) {\n\t\tif (err) { throw err; }\n\t\tvar output = mustache.render(data.toString(), view);\n\t\tfs.writeFile(path.join(outputDir, 'gallery.html'), output, function(err) {\n\t\t\tif(err) {\n\t\t\t\tlog.error(err);\n\t\t\t} else {\n\t\t\t\tlog.success('Gallery generated');\n\t\t\t\tcb();\n\t\t\t}\n\t\t});\n\t});\n};","/home/travis/build/npmtest/node-npmtest-wraith/node_modules/wraith/lib/helpers.js":"'use strict';\n\nmodule.exports.sortByProp = function(prop) {\n\treturn function(a,b) {\n\t\tif(a[prop] > b[prop]) {\n\t\t\treturn 1;\n\t\t} else if( a[prop] < b[prop] ) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn 0;\n\t};\n};\n\nmodule.exports.emptyFolder = function(folder, cb) {\n\tif(typeof(folder) === 'undefined') { return false; }\n\n\tvar rimraf = require('rimraf');\n\trimraf(folder, function(err) {\n\t\tif( err ) { throw err; }\n\t\tcb();\n\t});\n\treturn true;\n};\n","/home/travis/build/npmtest/node-npmtest-wraith/node_modules/wraith/lib/logger.js":"'use strict';\n\nvar chalk      = require('chalk');\nvar logSymbols = require('log-symbols');\n\nexports.error = function(msg, hide) {\n\tthis.logger('error', logSymbols.error + ' ' + msg, hide);\n};\n\nexports.warn = function(msg, hide) {\n\tthis.logger('warn', logSymbols.warning + ' ' + msg, hide);\n};\n\nexports.success = function(msg, hide) {\n\tthis.logger('success', logSymbols.success + ' ' + msg, hide);\n};\n\nexports.info = function(msg, hide) {\n\tthis.logger('info', logSymbols.info + ' ' + msg, hide);\n};\n\nexports.log = function(msg, hide) {\n\tthis.logger('log', msg, hide);\n};\n\nexports.logger = function(level, msg, hide) {\n\tvar color = false;\n\tswitch(level) {\n\t\tcase 'error':\n\t\t\tcolor = chalk.red.bold;\n\t\t\tbreak;\n\t\tcase 'warn':\n\t\t\tcolor = chalk.yellow.bold;\n\t\t\tbreak;\n\t\tcase 'info':\n\t\t\tcolor = chalk.blue.bold;\n\t\t\tbreak;\n\t\tcase 'success':\n\t\t\tcolor = chalk.green.bold;\n\t\t\tbreak;\n\t}\n\tif(!hide && !this.quiet) {\n\t\tif(color) {\n\t\t\tconsole.log(color(msg));\n\t\t} else {\n\t\t\tconsole.log(msg);\n\t\t}\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-wraith/node_modules/wraith/lib/spider.js":"'use strict';\n\nvar fs     = require('fs');\nvar mkdirp = require('mkdirp');\nvar crawl  = require('crawl');\nvar log    = require('./logger');\n\nmodule.exports.spider = function(url, file, callback) {\n\n\tlog.log('Crawl of ' + url + ' started');\n\n\tcrawl.crawl(url, { headers: false, body: false }, function(err, pages) {\n\n\t\tif (err) {\n\t\t\tlog.error('An error occured', err);\n\t\t\treturn;\n\t\t}\n\n\t\tvar txt         = '';\n\t\tvar link        = '';\n\t\tvar pagesLength = pages.length;\n\n\t\tfor(var i = 0; i<pagesLength; i++) {\n\t\t\tlink = pages[i].url;\n\t\t\tvar excPattern = new RegExp('.(css|js|jpg|jpeg|png|pdf|doc|xls|xlsx|ppt|txt|gif|swf|svg|ttf|otf|woff|json|xml)+$');\n\t\t\tif(link.indexOf(url) === 0 && !link.match(excPattern)) {\n\t\t\t\ttxt += link.replace(url, '') + '\\n';\n\t\t\t}\n\t\t}\n\n\t\ttxt = txt.trim();\n\n\t\tif(txt.length > 0) {\n\t\t\tvar folders = file.split('/');\n\t\t\tfolders.pop();\n\t\t\tfolders = folders.join('/');\n\n\t\t\tmkdirp(folders, function (err) {\n\t\t\t\tif (err) { throw err; }\n\t\t\t\tfs.writeFile(file, txt, function(err) {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\tlog.error(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.log('Spider file saved to ' + file);\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tlog.error('No urls found');\n\t\t\tprocess.exit(1);\n\t\t}\n\t});\n};\n"}